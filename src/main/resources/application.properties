spring.application.name=taskmanagement_backend

# MySQL Database Configuration
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/db_taskmanagement}
spring.datasource.username=${DB_USERNAME:developer}
spring.datasource.password=${DB_PASSWORD:123456}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql
spring.jpa.defer-datasource-initialization=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Logging Configuration
logging.level.root=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.data.elasticsearch=WARN
logging.level.com.example.taskmanagement_backend=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.web.socket=INFO
# Remove debug level logs for WebSocketMessageBrokerStats
logging.level.org.springframework.web.socket.config.WebSocketMessageBrokerStats=INFO

# Flyway Configuration
spring.flyway.enabled=false
#spring.flyway.baseline-on-migrate=true
#spring.flyway.locations=classpath:db/migration
#spring.flyway.validate-on-migrate=true

# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.access-token.expiration=${JWT_ACCESS_TOKEN_EXPIRATION:72000000}
jwt.refresh-token.expiration=${JWT_REFRESH_TOKEN_EXPIRATION:2592000000}

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email,https://www.googleapis.com/auth/gmail.readonly,https://www.googleapis.com/auth/gmail.send,https://www.googleapis.com/auth/gmail.compose,https://www.googleapis.com/auth/gmail.modify,https://www.googleapis.com/auth/calendar
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:8080/api/auth/google/callback}

# Application URLs
app.frontend.url=${FRONTEND_URL:https://main.d2az19adxqfdf3.amplifyapp.com}
app.admin.url=${ADMIN_FRONTEND_URL:https://main.d4nz8d2yz1imm.amplifyapp.com}
app.backend.url=${BACKEND_URL:http://localhost:8080}

# CORS Configuration - Support multiple frontend origins including production
cors.allowed.origins=${CORS_ALLOWED_ORIGINS:https://main.d2az19adxqfdf3.amplifyapp.com,https://main.d4nz8d2yz1imm.amplifyapp.com,http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173}
cors.allowed.methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
cors.allowed.headers=${CORS_ALLOWED_HEADERS:*}
cors.allow.credentials=${CORS_ALLOW_CREDENTIALS:true}
cors.max.age=${CORS_MAX_AGE:3600}

# Cache
spring.cache.type=redis
spring.data.redis.host=${SPRING_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_REDIS_PORT:6379}
spring.data.redis.password=${SPRING_REDIS_PASSWORD:redis_password}
spring.cache.redis.time-to-live=600000

stripe.api.key=${STRIPE_SECRET_KEY:your-stripe-secret-key}
stripe.publishable.key=${STRIPE_PUBLISHABLE_KEY:your-stripe-publishable-key}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:}

# Stripe Product Configuration
stripe.products.monthly.price-id=${STRIPE_MONTHLY_PRICE_ID:your-monthly-price-id}
stripe.products.quarterly.price-id=${STRIPE_QUARTERLY_PRICE_ID:your-quarterly-price-id}
stripe.products.yearly.price-id=${STRIPE_YEARLY_PRICE_ID:your-yearly-price-id}


# Stripe Success/Cancel URLs - Updated for production
stripe.success.url=${STRIPE_SUCCESS_URL:https://main.d2az19adxqfdf3.amplifyapp.com/payment/success}
stripe.cancel.url=${STRIPE_CANCEL_URL:https://main.d2az19adxqfdf3.amplifyapp.com/payment/cancel}

# Organization Auto-Creation (OAuth2)
app.oauth.auto-create-organization=${APP_OAUTH_AUTO_CREATE_ORGANIZATION:true}
app.oauth.auto-create-exclude-public-domains=${APP_OAUTH_AUTO_CREATE_EXCLUDE_PUBLIC_DOMAINS:true}

# Token Management Configuration
app.token.cleanup.enabled=${TOKEN_CLEANUP_ENABLED:true}
app.token.max-per-user=${TOKEN_MAX_PER_USER:5}

# Elasticsearch Configuration
spring.elasticsearch.uris=${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}
spring.elasticsearch.connection-timeout=10s
spring.elasticsearch.socket-timeout=30s

# Kafka Configuration for Search Events
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9094}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=search-service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.retries=3
spring.kafka.producer.acks=1

# AWS S3 Configuration
aws.access-key-id=${AWS_ACCESS_KEY_ID:your-aws-access-key-id}
aws.secret-access-key=${AWS_SECRET_ACCESS_KEY:your-aws-secret-access-key}
aws.region=${AWS_REGION:ap-southeast-2}
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME:your-s3-bucket-name}
aws.s3.endpoint=${AWS_S3_ENDPOINT:}
aws.s3.presigned-url-expiration=${AWS_S3_PRESIGNED_URL_EXPIRATION:3600}
aws.s3.max-file-size=${AWS_S3_MAX_FILE_SIZE:10485760}
aws.s3.key-prefix=${AWS_S3_KEY_PREFIX:task-files/}

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:100MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:100MB}

# File Upload Service Configuration
app.file-upload.allowed-extensions=${ALLOWED_FILE_EXTENSIONS:.jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.zip,.rar}
app.file-upload.max-file-size-bytes=${MAX_FILE_SIZE_BYTES:104857600}
app.file-upload.temp-directory=${TEMP_UPLOAD_DIRECTORY:./uploads/temp}
app.file-upload.s3-folder-prefix=${S3_FOLDER_PREFIX:task-attachments/}

#Config email for invitation
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:namle337323@gmail.com}
spring.mail.password=${MAIL_PASSWORD:iqnh ulee qzrx frls}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Custom file upload settings
app.upload.dir=uploads
app.upload.max-file-size=10485760
app.upload.allowed-types=image/jpeg,image/png,image/gif,image/webp,application/pdf,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

# AWS S3 Configuration (Enhanced)
aws.s3.region=${AWS_REGION:ap-southeast-2}
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME:taskflowprojectteam123}
aws.s3.presigned-url-expiration=${AWS_S3_PRESIGNED_URL_EXPIRATION:3600}
aws.s3.max-file-size=${AWS_S3_MAX_FILE_SIZE:10485760}
aws.s3.allowed-extensions=${AWS_S3_ALLOWED_EXTENSIONS:.pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.mp4,.avi,.mov}

# CORS Configuration for Admin React+Vite Application - Updated for production
spring.webmvc.cors.allowed-origins=https://main.d2az19adxqfdf3.amplifyapp.com,https://main.d4nz8d2yz1imm.amplifyapp.com,http://localhost:3000,http://localhost:5173
spring.webmvc.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
spring.webmvc.cors.allowed-headers=*
spring.webmvc.cors.allow-credentials=true
spring.webmvc.cors.max-age=3600

# ======================== AI AGENT CONFIGURATION ========================

# AI Agent Features
ai.agent.enabled=${AI_AGENT_ENABLED:true}
ai.moderation.enabled=${AI_MODERATION_ENABLED:true}
ai.rag.enabled=${AI_RAG_ENABLED:true}
ai.analytics.enabled=${AI_ANALYTICS_ENABLED:true}

# RAG Configuration
ai.rag.similarity.threshold=${AI_RAG_SIMILARITY_THRESHOLD:0.7}
ai.rag.max.context.documents=${AI_RAG_MAX_CONTEXT_DOCUMENTS:5}

# Embedding Configuration
ai.embedding.mode=${AI_EMBEDDING_MODE:fallback}
ai.embedding.api.url=${AI_EMBEDDING_API_URL:https://api.together.ai/v1/embeddings}
ai.embedding.api.key=${AI_EMBEDDING_API_KEY:}
ai.embedding.model=${AI_EMBEDDING_MODEL:llama-text-embed-v2}
# Gemini API Configuration
gemini.api.key=${GEMINI_API_KEY:your-gemini-api-key}

# Chat endpoint
gemini.chat.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent

# Gemini API Timeout Configuration
gemini.api.timeout.seconds=${GEMINI_API_TIMEOUT_SECONDS:60}
gemini.api.read.timeout.seconds=${GEMINI_API_READ_TIMEOUT_SECONDS:45}
gemini.api.connection.timeout.seconds=${GEMINI_API_CONNECTION_TIMEOUT_SECONDS:30}

gemini.moderation.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent

# Pinecone Configuration (Legacy - for backward compatibility)
pinecone.api.key=${PINECONE_API_KEY:your-pinecone-api-key}
pinecone.host=${PINECONE_HOST:your-pinecone-host}
pinecone.index.name=${PINECONE_INDEX_NAME:taskflow-documents}

# RAG Pinecone Configuration (New - maps to ai.* properties in code)
ai.pinecone.api.key=${AI_PINECONE_API_KEY:your-ai-pinecone-api-key}
ai.pinecone.host=${AI_PINECONE_HOST:your-ai-pinecone-host}
ai.pinecone.index.name=${AI_PINECONE_INDEX_NAME:taskflow-documents}

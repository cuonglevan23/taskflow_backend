package com.example.taskmanagement_backend.agent.service;

import com.example.taskmanagement_backend.agent.dto.ChatResponse;
import com.example.taskmanagement_backend.agent.tools.MyTaskTools;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Handler x·ª≠ l√Ω h·ªôi tho·∫°i multi-turn cho AI Agent
 * Thu th·∫≠p th√¥ng tin t·ª´ng b∆∞·ªõc v√† th·ª±c hi·ªán c√°c t√°c v·ª• khi ƒë·ªß d·ªØ li·ªáu
 * FIXED: Use rule-based intent detection to avoid additional API calls
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class MultiTurnConversationHandler {

    private final ConversationStateService stateService;
    private final MyTaskTools taskTools;
    // REMOVED IntentDetectionService to prevent additional API calls

    /**
     * X·ª≠ l√Ω tin nh·∫Øn trong context multi-turn conversation
     * FIXED: COMPLETELY disabled hard-coded logic - let Gemini AI classify ALL intents first
     * MultiTurnConversationHandler only assists when explicitly called by CoreAgentService
     */
    public ChatResponse handleMultiTurnMessage(String conversationId, Long userId, String userMessage) {
        ConversationStateService.ConversationState state = stateService.getConversationState(conversationId);

        // FIXED: ALWAYS let Gemini AI handle first - no hard-coded interruption
        if (state == null) {
            // No existing state, always let CoreAgentService + Gemini AI handle
            return null;
        }

        // If there's existing state, check if user wants to exit/decline
        String lowerMessage = userMessage.toLowerCase().trim();

        // Only handle explicit exit commands to break out of multi-turn
        if (lowerMessage.equals("tho√°t") || lowerMessage.equals("exit") ||
            lowerMessage.equals("h·ªßy") || lowerMessage.equals("cancel") ||
            lowerMessage.equals("d·ª´ng") || lowerMessage.equals("stop")) {

            stateService.clearState(conversationId);
            log.info("User explicitly exited multi-turn conversation with command: {}", lowerMessage);
            return null; // Let Gemini AI handle the exit response
        }

        // CRITICAL FIX: For ALL other messages in multi-turn state,
        // let Gemini AI classify intent first instead of continuing multi-turn
        // This prevents hard-coded declining detection from overriding AI classification
        stateService.clearState(conversationId); // Clear state to let AI reclassify
        log.info("Clearing multi-turn state to let Gemini AI reclassify intent for message: {}", userMessage);

        return null; // Always let CoreAgentService + Gemini AI handle
    }

    /**
     * Rule-based detection for multi-turn conversation (no API calls)
     */
    private boolean shouldStartMultiTurnConversation(String userMessage) {
        String lowerMessage = userMessage.toLowerCase().trim();

        // Check for incomplete task creation requests that need more info
        if (lowerMessage.contains("t·∫°o task") || lowerMessage.contains("create task")) {
            // If message is very short or lacks detail, start multi-turn
            String[] words = userMessage.trim().split("\\s+");
            if (words.length <= 3) {
                return true; // Very short, likely needs more info
            }

            // Check if missing important details
            boolean hasTitle = extractTaskTitle(userMessage) != null;
            boolean hasDeadline = extractDeadline(userMessage) != null;
            boolean hasDescription = userMessage.length() > 20;

            // Start multi-turn if missing critical info
            return !hasTitle || (!hasDeadline && !hasDescription);
        }

        // Check for incomplete update requests
        if (lowerMessage.contains("c·∫≠p nh·∫≠t") || lowerMessage.contains("update") || lowerMessage.contains("s·ª≠a")) {
            return !lowerMessage.contains("task") && !containsTaskId(userMessage);
        }

        // Check for incomplete delete requests
        if (lowerMessage.contains("x√≥a") || lowerMessage.contains("delete") || lowerMessage.contains("remove")) {
            return !containsTaskId(userMessage);
        }

        return false;
    }

    /**
     * Check if message contains task ID
     */
    private boolean containsTaskId(String message) {
        // Simple check for task ID patterns
        return message.matches(".*\\b\\d+\\b.*") || // Contains numbers
               message.toLowerCase().contains("task") ||
               message.toLowerCase().contains("c√¥ng vi·ªác");
    }

    /**
     * B·∫Øt ƒë·∫ßu flow t·∫°o task
     */
    private ChatResponse startTaskCreationFlow(String conversationId, Long userId, String userMessage) {
        ConversationStateService.ConversationState state = stateService.createOrUpdateState(
            conversationId, ConversationStateService.ConversationType.CREATE_TASK, "COLLECTING_TITLE");

        // Th·ª≠ extract title t·ª´ message ban ƒë·∫ßu
        String extractedTitle = extractTaskTitle(userMessage);

        if (extractedTitle != null && !extractedTitle.trim().isEmpty()) {
            stateService.updateCollectedData(conversationId, "title", extractedTitle);

            // N·∫øu c√≥ title r·ªìi, h·ªèi th√™m th√¥ng tin kh√°c
            String deadline = extractDeadline(userMessage);
            if (deadline != null) {
                stateService.updateCollectedData(conversationId, "deadline", deadline);
            }

            return askForAdditionalInfo(conversationId, extractedTitle);
        } else {
            // Ch∆∞a c√≥ title, h·ªèi title
            return buildResponse(conversationId,
                "üí° T√¥i s·∫Ω gi√∫p b·∫°n t·∫°o task m·ªõi! B·∫°n mu·ªën t·∫°o task c√≥ ti√™u ƒë·ªÅ g√¨?\n\n" +
                "V√≠ d·ª•: 'Ho√†n th√†nh b√°o c√°o th√°ng 9' ho·∫∑c 'H·ªçp team review d·ª± √°n'");
        }
    }

    /**
     * X·ª≠ l√Ω flow t·∫°o task
     */
    private ChatResponse handleTaskCreationFlow(String conversationId, Long userId, String userMessage,
                                              ConversationStateService.ConversationState state) {

        switch (state.getCurrentStep()) {
            case "COLLECTING_TITLE":
                return handleTitleCollection(conversationId, userId, userMessage, state);

            case "COLLECTING_ADDITIONAL_INFO":
                return handleAdditionalInfoCollection(conversationId, userId, userMessage, state);

            case "CONFIRMING_CREATION":
                return handleCreationConfirmation(conversationId, userId, userMessage, state);

            default:
                return startTaskCreationFlow(conversationId, userId, userMessage);
        }
    }

    /**
     * Thu th·∫≠p ti√™u ƒë·ªÅ task
     */
    private ChatResponse handleTitleCollection(String conversationId, Long userId, String userMessage,
                                             ConversationStateService.ConversationState state) {

        // Extract title t·ª´ user message
        String title = extractTaskTitleFromPlainText(userMessage);

        if (title == null || title.trim().isEmpty()) {
            return buildResponse(conversationId,
                "‚ùì T√¥i ch∆∞a hi·ªÉu r√µ ti√™u ƒë·ªÅ task. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?\n\n" +
                "V√≠ d·ª•: 'T·∫°o task l√†m b√°o c√°o' ho·∫∑c ch·ªâ c·∫ßn 'L√†m b√°o c√°o th√°ng 9'");
        }

        stateService.updateCollectedData(conversationId, "title", title);
        return askForAdditionalInfo(conversationId, title);
    }

    /**
     * H·ªèi th√¥ng tin b·ªï sung
     */
    private ChatResponse askForAdditionalInfo(String conversationId, String title) {
        stateService.createOrUpdateState(conversationId,
            ConversationStateService.ConversationType.CREATE_TASK, "COLLECTING_ADDITIONAL_INFO");

        return buildResponse(conversationId,
            String.format("‚úÖ T√¥i s·∫Ω t·∫°o task: \"%s\"\n\n" +
                "üîπ B·∫°n c√≥ mu·ªën th√™m th√¥ng tin n√†o kh√°c kh√¥ng?\n" +
                "- M√¥ t·∫£ chi ti·∫øt\n" +
                "- Th·ªùi h·∫°n (deadline)\n" +
                "- ƒê·ªô ∆∞u ti√™n (cao/trung b√¨nh/th·∫•p)\n\n" +
                "Ho·∫∑c nh·∫≠p 't·∫°o lu√¥n' ƒë·ªÉ t·∫°o task ngay! üöÄ", title));
    }

    /**
     * Thu th·∫≠p th√¥ng tin b·ªï sung
     */
    private ChatResponse handleAdditionalInfoCollection(String conversationId, Long userId, String userMessage,
                                                      ConversationStateService.ConversationState state) {

        String lowerMessage = userMessage.toLowerCase().trim();

        // CRITICAL: Check for declining intent FIRST
        if (lowerMessage.contains("kh√¥ng mu·ªën") || lowerMessage.contains("kh√¥ng c·∫ßn") ||
            (lowerMessage.contains("kh√¥ng") && lowerMessage.contains("t·∫°o")) ||
            lowerMessage.contains("th√¥i") || lowerMessage.contains("h·ªßy") ||
            lowerMessage.contains("cancel") || lowerMessage.contains("d·ª´ng")) {

            // Clear state and exit multi-turn conversation
            stateService.clearState(conversationId);

            log.info("User declined task creation in multi-turn flow, clearing state and exiting");

            // Return null to let CoreAgentService handle with Gemini AI
            return null; // Let normal flow handle declining properly
        }

        // N·∫øu user mu·ªën t·∫°o ngay
        if (lowerMessage.contains("t·∫°o lu√¥n") || lowerMessage.contains("t·∫°o ngay") ||
            lowerMessage.equals("ok") || lowerMessage.equals("xong")) {
            return executeTaskCreation(conversationId, userId, state);
        }

        // Thu th·∫≠p th√¥ng tin b·ªï sung
        collectAdditionalInfo(conversationId, userMessage);

        return buildResponse(conversationId,
            "üìù ƒê√£ ghi nh·∫≠n th√¥ng tin b·ªï sung!\n\n" +
            "B·∫°n c√≥ mu·ªën th√™m g√¨ n·ªØa kh√¥ng? Ho·∫∑c nh·∫≠p 't·∫°o lu√¥n' ƒë·ªÉ ho√†n th√†nh! ‚ú®");
    }

    /**
     * X·ª≠ l√Ω x√°c nh·∫≠n t·∫°o task
     */
    private ChatResponse handleCreationConfirmation(String conversationId, Long userId, String userMessage,
                                                  ConversationStateService.ConversationState state) {
        String lowerMessage = userMessage.toLowerCase().trim();

        // X√°c nh·∫≠n t·∫°o task
        if (lowerMessage.contains("c√≥") || lowerMessage.contains("yes") ||
            lowerMessage.contains("ok") || lowerMessage.contains("ƒë·ªìng √Ω") ||
            lowerMessage.contains("x√°c nh·∫≠n") || lowerMessage.contains("t·∫°o")) {
            return executeTaskCreation(conversationId, userId, state);
        }

        // H·ªßy t·∫°o task
        if (lowerMessage.contains("kh√¥ng") || lowerMessage.contains("no") ||
            lowerMessage.contains("h·ªßy") || lowerMessage.contains("cancel")) {
            stateService.clearState(conversationId);
            return buildResponse(conversationId, "‚ùå ƒê√£ h·ªßy t·∫°o task. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i b·∫•t c·ª© l√∫c n√†o!");
        }

        // Y√™u c·∫ßu x√°c nh·∫≠n r√µ r√†ng h∆°n
        return buildResponse(conversationId,
            "ü§î T√¥i ch∆∞a hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ mu·ªën t·∫°o task n√†y kh√¥ng?\n\n" +
            "Tr·∫£ l·ªùi 'c√≥' ƒë·ªÉ t·∫°o ho·∫∑c 'kh√¥ng' ƒë·ªÉ h·ªßy.");
    }

    /**
     * Thu th·∫≠p th√¥ng tin b·ªï sung t·ª´ message
     */
    private void collectAdditionalInfo(String conversationId, String userMessage) {
        // M√¥ t·∫£
        if (userMessage.toLowerCase().contains("m√¥ t·∫£") || userMessage.toLowerCase().contains("chi ti·∫øt")) {
            String description = extractDescription(userMessage);
            if (description != null) {
                stateService.updateCollectedData(conversationId, "description", description);
            }
        }

        // Deadline
        String deadline = extractDeadline(userMessage);
        if (deadline != null) {
            stateService.updateCollectedData(conversationId, "deadline", deadline);
        }

        // Priority
        String priority = extractPriority(userMessage);
        if (priority != null) {
            stateService.updateCollectedData(conversationId, "priority", priority);
        }

        // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a c·ª• th·ªÉ, coi nh∆∞ m√¥ t·∫£
        if (!userMessage.toLowerCase().contains("m√¥ t·∫£") &&
            !userMessage.toLowerCase().contains("deadline") &&
            !userMessage.toLowerCase().contains("∆∞u ti√™n") &&
            deadline == null && priority == null) {
            stateService.updateCollectedData(conversationId, "description", userMessage);
        }
    }

    /**
     * Th·ª±c hi·ªán t·∫°o task - COMPLETELY DISABLED
     * All task creation should go through CoreAgentService only
     */
    private ChatResponse executeTaskCreation(String conversationId, Long userId,
                                           ConversationStateService.ConversationState state) {

        // CRITICAL FIX: Never create tasks here - always delegate to CoreAgentService
        log.info("DISABLED: MultiTurnConversationHandler task creation - delegating to CoreAgentService");

        // Clear any multi-turn state since we're not handling it
        stateService.clearState(conversationId);

        // Return null to let CoreAgentService handle via normal AI flow
        return null;

        /* COMPLETELY COMMENTED OUT TO PREVENT DUPLICATE TASK CREATION
        String title = (String) stateService.getCollectedData(conversationId, "title");
        String description = (String) stateService.getCollectedData(conversationId, "description");
        String deadline = (String) stateService.getCollectedData(conversationId, "deadline");
        String priority = (String) stateService.getCollectedData(conversationId, "priority");

        // S·ª≠ d·ª•ng title l√†m description n·∫øu kh√¥ng c√≥ description
        if (description == null || description.trim().isEmpty()) {
            description = title;
        }

        try {
            String result = taskTools.createTask(title, description, priority, deadline, null, userId);

            // Clear state sau khi ho√†n th√†nh
            stateService.clearState(conversationId);

            return buildResponse(conversationId, result + "\n\nüéâ Task ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");

        } catch (Exception e) {
            log.error("Error creating task in multi-turn conversation", e);
            stateService.clearState(conversationId);

            return buildResponse(conversationId,
                "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o task: " + e.getMessage() +
                "\n\nB·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?");
        }
        */
    }

    // =============================================================================
    // HELPER METHODS
    // =============================================================================

    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i intent t·∫°o task kh√¥ng
     */
    private boolean isTaskCreationIntent(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();

        return lowerMessage.contains("t·∫°o task") ||
               lowerMessage.contains("t·∫°o c√¥ng vi·ªác") ||
               lowerMessage.contains("mu·ªën t·∫°o task") ||
               lowerMessage.contains("t·∫°o nhi·ªám v·ª•") ||
               (lowerMessage.startsWith("task ") && !lowerMessage.contains("x√≥a") && !lowerMessage.contains("c·∫≠p nh·∫≠t")) ||
               lowerMessage.equals("t·∫°o task");
    }

    /**
     * Extract task title t·ª´ c√°c pattern th√¥ng th∆∞·ªùng
     */
    private String extractTaskTitle(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();

        // Patterns for task creation
        String[] patterns = {
            "t·∫°o task (.+)",
            "task (.+)",
            "t·∫°o nhi·ªám v·ª• (.+)",
            "t·∫°o c√¥ng vi·ªác (.+)"
        };

        for (String patternStr : patterns) {
            Pattern pattern = Pattern.compile(patternStr, Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(userMessage);
            if (matcher.find()) {
                return matcher.group(1).trim();
            }
        }

        return null;
    }

    /**
     * Extract title t·ª´ plain text (khi user ch·ªâ tr·∫£ l·ªùi title)
     */
    private String extractTaskTitleFromPlainText(String userMessage) {
        String cleaned = userMessage.trim();

        // Lo·∫°i b·ªè c√°c t·ª´ kh√¥ng c·∫ßn thi·∫øt
        String[] removeWords = {"t·∫°o task", "task", "t·∫°o", "l√†m", "th·ª±c hi·ªán"};

        for (String word : removeWords) {
            if (cleaned.toLowerCase().startsWith(word.toLowerCase())) {
                cleaned = cleaned.substring(word.length()).trim();
            }
        }

        return cleaned.isEmpty() ? null : cleaned;
    }

    /**
     * Extract m√¥ t·∫£
     */
    private String extractDescription(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();

        if (lowerMessage.contains("m√¥ t·∫£:") || lowerMessage.contains("chi ti·∫øt:")) {
            String[] parts = userMessage.split(":|m√¥ t·∫£|chi ti·∫øt", 2);
            return parts.length > 1 ? parts[1].trim() : null;
        }

        return null;
    }

    /**
     * Extract deadline
     */
    private String extractDeadline(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();

        if (lowerMessage.contains("ng√†y mai") || lowerMessage.contains("tomorrow")) {
            return LocalDateTime.now().plusDays(1).toString();
        }
        if (lowerMessage.contains("tu·∫ßn sau") || lowerMessage.contains("next week")) {
            return LocalDateTime.now().plusWeeks(1).toString();
        }
        if (lowerMessage.contains("cu·ªëi tu·∫ßn") || lowerMessage.contains("weekend")) {
            return LocalDateTime.now().plusDays(7 - LocalDateTime.now().getDayOfWeek().getValue()).toString();
        }

        return null;
    }

    /**
     * Extract priority
     */
    private String extractPriority(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();

        if (lowerMessage.contains("cao") || lowerMessage.contains("high") || lowerMessage.contains("urgent")) {
            return "HIGH";
        }
        if (lowerMessage.contains("th·∫•p") || lowerMessage.contains("low")) {
            return "LOW";
        }
        if (lowerMessage.contains("trung b√¨nh") || lowerMessage.contains("medium") || lowerMessage.contains("normal")) {
            return "MEDIUM";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√°c flow kh√°c (placeholder)
     */
    private ChatResponse handleTaskUpdateFlow(String conversationId, Long userId, String userMessage,
                                            ConversationStateService.ConversationState state) {
        // TODO: Implement task update flow
        return null;
    }

    private ChatResponse handleTaskDeletionFlow(String conversationId, Long userId, String userMessage,
                                              ConversationStateService.ConversationState state) {
        // TODO: Implement task deletion flow
        return null;
    }

    /**
     * Build response
     */
    private ChatResponse buildResponse(String conversationId, String content) {
        return ChatResponse.builder()
            .messageId(UUID.randomUUID().toString())
            .content(content)
            .senderType("AGENT")
            .timestamp(LocalDateTime.now())
            .aiModel("multi-turn-handler")
            .confidence(0.95)
            .success(true)
            .status("MULTI_TURN_ACTIVE")
            .conversationId(conversationId)
            .agentActive(true)
            .build();
    }
}

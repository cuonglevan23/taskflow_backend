package com.example.taskmanagement_backend.agent.service;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

/**
 * Document Loader Service - T·ª± ƒë·ªông t·∫£i v√† t√≠ch h·ª£p t√†i li·ªáu v√†o RAG khi kh·ªüi ƒë·ªông
 * CH·∫†Y T·ª∞ ƒê·ªòNG - Kh√¥ng c·∫ßn g·ªçi API, RAG s·∫Ω c√≥ ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu khi chat
 */
@Slf4j
@Service
public class DocumentLoaderService implements CommandLineRunner {

    private final RAGService ragService;

    public DocumentLoaderService(RAGService ragService) {
        this.ragService = ragService;
    }

    @Override
    public void run(String... args) throws Exception {
        log.info("üöÄ AUTO-LOADING ALL DOCS INTO RAG - Chat system will have full knowledge");

        // Load t·∫•t c·∫£ docs t·ª´ th∆∞ m·ª•c ch√≠nh
        loadAllDocsFromMainDirectory();

        // Load t·ª´ agent docs n·∫øu c√≥
        loadFromAgentDocsDirectory();

        // Load comprehensive guides
        loadComprehensiveGuides();

        log.info("‚úÖ RAG AUTO-LOADING COMPLETED - Chat system ready with full documentation knowledge!");
    }

    /**
     * Load t·∫•t c·∫£ docs t·ª´ th∆∞ m·ª•c docs/ ch√≠nh
     */
    private void loadAllDocsFromMainDirectory() {
        try {
            Path docsPath = Paths.get("docs");

            if (!Files.exists(docsPath)) {
                log.warn("Main docs directory not found: docs/");
                return;
            }

            try (Stream<Path> paths = Files.walk(docsPath)) {
                paths
                    .filter(Files::isRegularFile)
                    .filter(path -> path.toString().endsWith(".md"))
                    .forEach(this::autoLoadDocument);
            }

            log.info("üìö Loaded all documents from main docs directory");

        } catch (IOException e) {
            log.error("‚ùå Error auto-loading main docs", e);
        }
    }

    /**
     * Load t·ª´ agent docs directory
     */
    private void loadFromAgentDocsDirectory() {
        try {
            Path agentDocsPath = Paths.get("src/main/java/com/example/taskmanagement_backend/agent/docs");

            if (!Files.exists(agentDocsPath)) {
                log.debug("Agent docs directory not found - creating it for future use");
                Files.createDirectories(agentDocsPath);
                return;
            }

            try (Stream<Path> paths = Files.walk(agentDocsPath)) {
                paths
                    .filter(Files::isRegularFile)
                    .filter(path -> path.toString().endsWith(".md"))
                    .forEach(this::autoLoadDocument);
            }

            log.info("üìñ Loaded agent docs (including AI_AGENT_MYTASK_API_GUIDE.md, Taskflow_User_Guide.md if present)");

        } catch (IOException e) {
            log.error("‚ùå Error loading agent docs", e);
        }
    }

    /**
     * Auto-load m·ªôt document v√†o RAG
     */
    private void autoLoadDocument(Path filePath) {
        try {
            String fileName = filePath.getFileName().toString();
            String content = Files.readString(filePath);

            // Skip empty or too small files
            if (content.trim().length() < 50) {
                return;
            }

            log.debug("üìÑ Processing document: {} ({} chars)", fileName, content.length());

            // 1. Data Preprocessing: Chia document th√†nh chunks
            List<DocumentChunk> chunks = preprocessDocument(fileName, content);

            // 2. Generate embeddings v√† 3. Upsert v√†o Pinecone cho t·ª´ng chunk
            for (DocumentChunk chunk : chunks) {
                processDocumentChunk(chunk);
            }

            log.info("‚úÖ Processed {} chunks from {}", chunks.size(), fileName);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Failed to auto-load: {}", filePath, e);
        }
    }

    /**
     * 1. Data Preprocessing: Chia document th√†nh chunks nh·ªè v·ªõi metadata
     */
    private List<DocumentChunk> preprocessDocument(String fileName, String content) {
        List<DocumentChunk> chunks = new ArrayList<>();

        // Smart chunking based on content structure
        String[] sections = content.split("\\n\\s*#{1,3}\\s+"); // Split by headers

        if (sections.length <= 1) {
            // No headers found, split by paragraphs
            sections = content.split("\\n\\s*\\n");
        }

        int chunkIndex = 0;
        for (String section : sections) {
            if (section.trim().length() < 100) continue; // Skip too small chunks

            // Further split large sections
            List<String> subChunks = splitLargeSection(section.trim());

            for (String subChunk : subChunks) {
                if (subChunk.trim().length() < 50) continue;

                String chunkId = fileName.replaceAll("[^a-zA-Z0-9]", "_") + "_chunk_" + chunkIndex++;

                DocumentChunk chunk = DocumentChunk.builder()
                    .id(chunkId)
                    .content(subChunk.trim())
                    .sourceFile(fileName)
                    .chunkIndex(chunkIndex - 1)
                    .category(smartCategorize(fileName, content))
                    .metadata(createChunkMetadata(fileName, content, chunkIndex - 1))
                    .build();

                chunks.add(chunk);
            }
        }

        return chunks.isEmpty() ? List.of(createSingleChunk(fileName, content)) : chunks;
    }

    /**
     * Split large sections into smaller chunks (max ~500 chars)
     */
    private List<String> splitLargeSection(String section) {
        List<String> chunks = new ArrayList<>();

        if (section.length() <= 500) {
            chunks.add(section);
            return chunks;
        }

        // Split by sentences first
        String[] sentences = section.split("\\. ");
        StringBuilder currentChunk = new StringBuilder();

        for (String sentence : sentences) {
            if (currentChunk.length() + sentence.length() > 500 && currentChunk.length() > 0) {
                chunks.add(currentChunk.toString().trim());
                currentChunk = new StringBuilder();
            }
            currentChunk.append(sentence).append(". ");
        }

        if (currentChunk.length() > 0) {
            chunks.add(currentChunk.toString().trim());
        }

        return chunks;
    }

    /**
     * Create metadata for each chunk
     */
    private Map<String, Object> createChunkMetadata(String fileName, String content, int chunkIndex) {
        return Map.of(
            "fileName", fileName,
            "sourceType", "documentation",
            "category", smartCategorize(fileName, content),
            "chunkIndex", chunkIndex,
            "processedAt", LocalDateTime.now().toString(),
            "processingPipeline", "rag_v2"
        );
    }

    /**
     * Create single chunk for small documents
     */
    private DocumentChunk createSingleChunk(String fileName, String content) {
        String chunkId = fileName.replaceAll("[^a-zA-Z0-9]", "_") + "_single";

        return DocumentChunk.builder()
            .id(chunkId)
            .content(content.trim())
            .sourceFile(fileName)
            .chunkIndex(0)
            .category(smartCategorize(fileName, content))
            .metadata(createChunkMetadata(fileName, content, 0))
            .build();
    }

    /**
     * 2. Generate Embedding + 3. Upsert v√†o Pinecone cho t·ª´ng chunk
     */
    private void processDocumentChunk(DocumentChunk chunk) {
        try {
            // 2. Generate embedding using llama-text-embed-v2
            double[] embedding = ragService.generateEmbeddingForChunk(chunk.getContent());

            // 3. Store in RAG (which will upsert to Pinecone)
            ragService.storeKnowledge(
                chunk.getId(),
                chunk.getSourceFile() + " - Chunk " + chunk.getChunkIndex(),
                chunk.getContent(),
                chunk.getMetadata()
            );

            log.debug("üîÑ Processed chunk {} from {}", chunk.getChunkIndex(), chunk.getSourceFile());

        } catch (Exception e) {
            log.warn("‚ùå Failed to process chunk {} from {}: {}",
                chunk.getChunkIndex(), chunk.getSourceFile(), e.getMessage());
        }
    }

    /**
     * Smart categorization d·ª±a tr√™n t√™n file v√† n·ªôi dung
     */
    private String smartCategorize(String fileName, String content) {
        String lower = fileName.toLowerCase();
        String lowerContent = content.toLowerCase();

        // Task management related
        if (lower.contains("task") || lower.contains("mytask") || lowerContent.contains("task management")) {
            return "task_management";
        }

        // AI Agent related
        if (lower.contains("ai") || lower.contains("agent") || lowerContent.contains("ai agent")) {
            return "ai_agent";
        }

        // Chat system
        if (lower.contains("chat") || lowerContent.contains("chat system")) {
            return "chat_system";
        }

        // API documentation
        if (lower.contains("api") || lowerContent.contains("api endpoint")) {
            return "api_documentation";
        }

        // User guides
        if (lower.contains("guide") || lower.contains("user") || lowerContent.contains("how to")) {
            return "user_guide";
        }

        return "general";
    }

    /**
     * Load comprehensive system guides v√†o RAG
     */
    private void loadComprehensiveGuides() {
        // Task Management comprehensive guide
        ragService.storeKnowledge(
            "comprehensive_task_guide",
            "Complete Task Management System Guide",
            createTaskSystemGuide(),
            Map.of("type", "comprehensive", "category", "task_management", "priority", "high")
        );

        // AI Agent comprehensive guide
        ragService.storeKnowledge(
            "comprehensive_ai_agent_guide",
            "Complete AI Agent & Tool Calling Guide",
            createAIAgentGuide(),
            Map.of("type", "comprehensive", "category", "ai_agent", "priority", "high")
        );

        // Chat system guide
        ragService.storeKnowledge(
            "comprehensive_chat_guide",
            "Complete Chat System with RAG Guide",
            createChatSystemGuide(),
            Map.of("type", "comprehensive", "category", "chat_system", "priority", "high")
        );

        // Declining patterns guide
        ragService.storeKnowledge(
            "declining_handling_guide",
            "User Declining Intent Handling Guide",
            createDecliningGuide(),
            Map.of("type", "comprehensive", "category", "declining_patterns", "priority", "high")
        );

        log.info("üß† Loaded comprehensive system guides into RAG");
    }

    /**
     * T·∫°o Task System Guide t·ªïng h·ª£p
     */
    private String createTaskSystemGuide() {
        return """
# Complete Task Management System Guide

## üéØ H·ªá th·ªëng Task Management v·ªõi AI Chat
H·ªá th·ªëng cho ph√©p qu·∫£n l√Ω task ho√†n to√†n th√¥ng qua chat t·ª± nhi√™n:

### T·∫°o Task:
- "T·∫°o task urgent ho√†n th√†nh b√°o c√°o deadline ng√†y mai"
- "Create high priority task review presentation" 
- AI t·ª± ƒë·ªông extract: title, priority (HIGH/MEDIUM/LOW), deadline

### Xem Task:
- "Show my tasks", "Danh s√°ch task c·ªßa t√¥i"
- "High priority tasks", "Overdue tasks"
- Filter t·ª± ƒë·ªông theo status, priority, date

### C·∫≠p nh·∫≠t Task:
- "Mark task 123 completed", "Update task title"
- "Change priority to high", "Set deadline Friday"

### Th·ªëng k√™:
- "Task statistics", "How many completed?"
- "Progress this week", "Completion rate"

## üöÄ AI Features:
- Natural language processing (Ti·∫øng Vi·ªát + English)
- Smart parameter extraction
- Context awareness from conversation
- Intelligent suggestions and error recovery

Task system ho·∫°t ƒë·ªông 100% th√¥ng qua chat - kh√¥ng c·∫ßn UI ph·ª©c t·∫°p!
        """;
    }

    /**
     * T·∫°o AI Agent Guide t·ªïng h·ª£p
     */
    private String createAIAgentGuide() {
        return """
# Complete AI Agent & Tool Calling System Guide

## ü§ñ AI Agent Core Functions:

### 1. Intent Detection:
- **ACTION**: User mu·ªën l√†m g√¨ ‚Üí Call tools
- **QUERY**: User h·ªèi th√¥ng tin ‚Üí Retrieve data  
- **CHAT**: Tr√≤ chuy·ªán ‚Üí RAG + LLM response
- **DECLINING**: User t·ª´ ch·ªëi ‚Üí Respect decision

### 2. Tool Calling:
- `createTask()`: T·∫°o task v·ªõi smart parsing
- `getUserTasks()`: L·∫•y danh s√°ch v·ªõi filtering
- `getTaskStatistics()`: Th·ªëng k√™ chi ti·∫øt
- `updateTask()`: C·∫≠p nh·∫≠t th√¥ng tin
- `deleteTask()`: X√≥a v·ªõi confirmation

### 3. Smart Processing:
- Auto parameter extraction t·ª´ natural language
- Context awareness t·ª´ conversation history  
- Error handling v·ªõi helpful suggestions
- Multi-language support (VI + EN)

### 4. RAG Enhancement:
- Access t·ªõi full documentation knowledge
- Context-aware responses
- Learning t·ª´ user patterns
- Quality scoring cho relevance

## ‚ö° Performance:
- Single unified AI call
- Smart caching v√† context reuse
- Sub-second response times
- Continuous learning v√† improvement

AI Agent th·ª±c s·ª± "hi·ªÉu" v√† "l√†m vi·ªác" cho user, kh√¥ng ch·ªâ tr·∫£ l·ªùi!
        """;
    }

    /**
     * T·∫°o Chat System Guide t·ªïng h·ª£p
     */
    private String createChatSystemGuide() {
        return """
# Complete Chat System with RAG Enhancement

## üí¨ Real-time Chat Features:
- WebSocket real-time communication
- Session persistence across conversations
- Message history v√† context continuity
- Multi-turn conversation support

## üß† RAG Integration:
- **Knowledge Base**: All docs auto-loaded
- **Smart Retrieval**: Vector similarity search
- **Context Enhancement**: Relevant info injected
- **Quality Scoring**: Best matches prioritized

## üöÄ AI Chat Capabilities:
- Natural language understanding
- Context-aware responses t·ª´ full documentation
- Pattern learning t·ª´ conversations  
- Declining detection v√† respectful handling

## üîß Technical Architecture:
- **CoreAgentService**: Main orchestrator
- **RAGService**: Context retrieval engine
- **UnifiedAIService**: Single point processing
- **SessionMemoryService**: Conversation persistence

## üí° User Experience:
- Conversational interface - n√≥i t·ª± nhi√™n
- AI hi·ªÉu context v√† history
- Smart suggestions v√† proactive help
- Both Vietnamese v√† English support

Chat system t·∫°o ra truly intelligent assistant!
        """;
    }

    /**
     * T·∫°o Declining Guide
     */
    private String createDecliningGuide() {
        return """
# User Declining Intent Handling Guide

## ü§ù Declining Detection System:

### Vietnamese Keywords:
- "kh√¥ng", "kh√¥ng c·∫ßn", "kh√¥ng mu·ªën" 
- "th√¥i", "b·ªè qua", "t·ª´ ch·ªëi"
- "h·ªßy", "d·ª´ng l·∫°i", "th√¥i kh√¥ng"

### English Keywords:  
- "no", "no thanks", "don't want"
- "cancel", "stop", "decline"
- "refuse", "reject", "skip", "pass"

### Context-based Detection:
- Task-related declining: "kh√¥ng mu·ªën t·∫°o task"
- General declining: conversation context analysis
- Confidence scoring: 0.0 - 1.0

## üéØ Smart Response Strategies:

### Task Decline:
"ü§ù Hi·ªÉu r·ªìi! B·∫°n kh√¥ng mu·ªën t·∫°o task l√∫c n√†y.
üí° ƒê·ªÅ xu·∫•t kh√°c: ghi ch√∫ √Ω t∆∞·ªüng, reminder, th·∫£o lu·∫≠n team"

### General Decline:
"üôè Kh√¥ng sao c·∫£! T√¥i t√¥n tr·ªçng quy·∫øt ƒë·ªãnh c·ªßa b·∫°n.
N·∫øu c√≥ g√¨ kh√°c c·∫ßn gi√∫p, ƒë·ª´ng ng·∫°i nh√©!"

### English Decline:
"üëç No problem at all! I completely understand.
Feel free to ask anything else - I'm here to help!"

## ‚ö° System Behavior:
- **NO TOOL CALLING** when declining detected
- Respectful acknowledgment
- Alternative suggestions when appropriate
- Maintain helpful but not pushy tone

Declining system ensures AI respects user autonomy!
        """;
    }

    /**
     * Data class for document chunks
     */
    @Data
    @lombok.Builder
    private static class DocumentChunk {
        private String id;
        private String content;
        private String sourceFile;
        private int chunkIndex;
        private String category;
        private Map<String, Object> metadata;
    }
}

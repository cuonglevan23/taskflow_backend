package com.example.taskmanagement_backend.services;

import com.example.taskmanagement_backend.entities.User;
import com.example.taskmanagement_backend.entities.UserProfile;
import com.example.taskmanagement_backend.repositories.UserJpaRepository;
import com.example.taskmanagement_backend.services.infrastructure.AutomatedEmailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class TrialManagementService {

    private final UserJpaRepository userRepository;
    private final AutomatedEmailService emailService;

    /**
     * Kh·ªüi t·∫°o trial 14 ng√†y cho user m·ªõi
     */
    @Transactional
    public TrialInfo initializeTrial(User user) {
        UserProfile profile = user.getUserProfile();
        if (profile == null) {
            throw new RuntimeException("User profile not found");
        }

        // Ki·ªÉm tra xem user ƒë√£ t·ª´ng c√≥ trial ch∆∞a
        if (hasUsedTrial(profile)) {
            log.warn("‚ö†Ô∏è User {} ƒë√£ t·ª´ng s·ª≠ d·ª•ng trial", user.getEmail());
            return TrialInfo.builder()
                    .hasAccess(false)
                    .status(TrialStatus.EXPIRED)
                    .message("Trial ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr∆∞·ªõc ƒë√≥")
                    .build();
        }

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime trialEnd = now.plusDays(14);

        profile.setIsPremium(true);
        profile.setPremiumPlanType("trial");
        profile.setPremiumExpiry(trialEnd);

        userRepository.save(user);

        log.info("‚úÖ Trial kh·ªüi t·∫°o th√†nh c√¥ng cho user: {} - B·∫Øt ƒë·∫ßu: {} - K·∫øt th√∫c: {}",
                user.getEmail(), now, trialEnd);

        // G·ª≠i email ch√†o m·ª´ng trial
        sendTrialWelcomeEmail(user, trialEnd);

        return TrialInfo.builder()
                .hasAccess(true)
                .status(TrialStatus.ACTIVE)
                .startDate(now)
                .endDate(trialEnd)
                .daysRemaining(14)
                .message("Trial 14 ng√†y ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
                .build();
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i trial c·ªßa user
     */
    public TrialInfo checkTrialStatus(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        UserProfile profile = user.getUserProfile();
        if (profile == null || !Boolean.TRUE.equals(profile.getIsPremium())) {
            return TrialInfo.builder()
                    .hasAccess(false)
                    .status(TrialStatus.EXPIRED)
                    .message("Kh√¥ng c√≥ subscription active")
                    .build();
        }

        // N·∫øu kh√¥ng ph·∫£i trial th√¨ l√† paid subscription
        if (!"trial".equals(profile.getPremiumPlanType())) {
            return TrialInfo.builder()
                    .hasAccess(true)
                    .status(TrialStatus.PAID_SUBSCRIPTION)
                    .message("ƒêang s·ª≠ d·ª•ng g√≥i tr·∫£ ph√≠")
                    .build();
        }

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime endDate = profile.getPremiumExpiry();

        if (endDate == null) {
            return TrialInfo.builder()
                    .hasAccess(false)
                    .status(TrialStatus.EXPIRED)
                    .message("Trial kh√¥ng c√≥ ng√†y h·∫øt h·∫°n")
                    .build();
        }

        // T√≠nh to√°n s·ªë ng√†y c√≤n l·∫°i
        long daysRemaining = ChronoUnit.DAYS.between(now, endDate);
        long hoursRemaining = ChronoUnit.HOURS.between(now, endDate);

        if (endDate.isAfter(now)) {
            // Trial c√≤n hi·ªáu l·ª±c
            TrialStatus status = daysRemaining <= 3 ? TrialStatus.EXPIRING_SOON : TrialStatus.ACTIVE;

            return TrialInfo.builder()
                    .hasAccess(true)
                    .status(status)
                    .startDate(endDate.minusDays(14)) // T√≠nh ng∆∞·ª£c l·∫°i start date
                    .endDate(endDate)
                    .daysRemaining((int) daysRemaining)
                    .hoursRemaining((int) hoursRemaining)
                    .message(String.format("Trial c√≤n %d ng√†y (%d gi·ªù)", daysRemaining, hoursRemaining))
                    .build();
        } else {
            // Trial ƒë√£ h·∫øt h·∫°n
            return TrialInfo.builder()
                    .hasAccess(false)
                    .status(TrialStatus.EXPIRED)
                    .startDate(endDate.minusDays(14))
                    .endDate(endDate)
                    .daysRemaining(0)
                    .hoursRemaining(0)
                    .daysOverdue((int) Math.abs(daysRemaining))
                    .message(String.format("Trial ƒë√£ h·∫øt h·∫°n %d ng√†y tr∆∞·ªõc", Math.abs(daysRemaining)))
                    .build();
        }
    }

    /**
     * Cron job ch·∫°y m·ªói gi·ªù ƒë·ªÉ ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i trial
     */
    @Scheduled(cron = "0 0 * * * ?") // Ch·∫°y m·ªói gi·ªù
    @Transactional
    public void processTrialStatus() {
        log.info("üïê B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i trial cho t·∫•t c·∫£ users...");

        LocalDateTime now = LocalDateTime.now();

        // L·∫•y t·∫•t c·∫£ users c√≥ trial active
        List<User> trialUsers = userRepository.findTrialUsers(now);

        int expiredCount = 0;
        int warningCount = 0;
        int finalWarningCount = 0;

        for (User user : trialUsers) {
            try {
                processUserTrial(user, now);

                TrialInfo trialInfo = checkTrialStatus(user.getId());

                switch (trialInfo.getStatus()) {
                    case EXPIRED:
                        expiredCount++;
                        break;
                    case EXPIRING_SOON:
                        if (trialInfo.getDaysRemaining() == 1) {
                            finalWarningCount++;
                        } else {
                            warningCount++;
                        }
                        break;
                }

            } catch (Exception e) {
                log.error("‚ùå L·ªói x·ª≠ l√Ω trial cho user {}: {}", user.getEmail(), e.getMessage());
            }
        }

        log.info("‚úÖ Ho√†n th√†nh ki·ªÉm tra trial - H·∫øt h·∫°n: {}, C·∫£nh b√°o: {}, C·∫£nh b√°o cu·ªëi: {}",
                expiredCount, warningCount, finalWarningCount);
    }

    /**
     * Cron job ch·∫°y h√†ng ng√†y ƒë·ªÉ g·ª≠i c·∫£nh b√°o trial
     */
    @Scheduled(cron = "0 0 9 * * ?") // 9:00 AM m·ªói ng√†y
    @Transactional
    public void sendTrialWarnings() {
        log.info("üìß G·ª≠i c·∫£nh b√°o trial h√†ng ng√†y...");

        LocalDateTime now = LocalDateTime.now();

        // Users c√≥ trial s·∫Ω h·∫øt h·∫°n trong 3 ng√†y
        List<User> expiringSoonUsers = userRepository.findTrialExpiringSoon(now, now.plusDays(3));

        for (User user : expiringSoonUsers) {
            try {
                TrialInfo trialInfo = checkTrialStatus(user.getId());

                if (trialInfo.getStatus() == TrialStatus.EXPIRING_SOON) {
                    sendTrialWarningEmail(user, trialInfo);
                }

            } catch (Exception e) {
                log.error("‚ùå L·ªói g·ª≠i c·∫£nh b√°o trial cho user {}: {}", user.getEmail(), e.getMessage());
            }
        }

        log.info("‚úÖ Ho√†n th√†nh g·ª≠i c·∫£nh b√°o trial");
    }

    /**
     * X·ª≠ l√Ω trial c·ªßa m·ªôt user c·ª• th·ªÉ
     */
    private void processUserTrial(User user, LocalDateTime now) {
        UserProfile profile = user.getUserProfile();
        if (profile == null || !"trial".equals(profile.getPremiumPlanType())) {
            return;
        }

        LocalDateTime endDate = profile.getPremiumExpiry();
        if (endDate == null) {
            return;
        }

        // N·∫øu trial ƒë√£ h·∫øt h·∫°n
        if (endDate.isBefore(now)) {
            log.info("‚è∞ Trial h·∫øt h·∫°n cho user: {} - Expired at: {}", user.getEmail(), endDate);

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            profile.setIsPremium(false);
            profile.setPremiumPlanType(null); // C√≥ th·ªÉ gi·ªØ l·∫°i ƒë·ªÉ track history
            userRepository.save(user);

            // G·ª≠i email th√¥ng b√°o h·∫øt h·∫°n
            sendTrialExpiredEmail(user, endDate);
        }
    }

    /**
     * Ki·ªÉm tra user ƒë√£ t·ª´ng s·ª≠ d·ª•ng trial ch∆∞a
     */
    private boolean hasUsedTrial(UserProfile profile) {
        // Logic c√≥ th·ªÉ ph·ª©c t·∫°p h∆°n, v√≠ d·ª• check history table
        // Hi·ªán t·∫°i ƒë∆°n gi·∫£n: n·∫øu c√≥ premiumExpiry v√† premiumPlanType t·ª´ng l√† "trial"
        return profile.getPremiumExpiry() != null &&
               ("trial".equals(profile.getPremiumPlanType()) || profile.getIsPremium() != null);
    }

    /**
     * G·ª≠i email ch√†o m·ª´ng trial
     */
    private void sendTrialWelcomeEmail(User user, LocalDateTime trialEnd) {
        try {
            String userName = getUserDisplayName(user);

            emailService.sendTrialWelcomeEmail(
                user.getEmail(),
                userName,
                trialEnd,
                14
            );

            log.info("üìß ƒê√£ g·ª≠i email ch√†o m·ª´ng trial cho: {}", user.getEmail());
        } catch (Exception e) {
            log.error("‚ùå L·ªói g·ª≠i email ch√†o m·ª´ng trial: {}", e.getMessage());
        }
    }

    /**
     * G·ª≠i email c·∫£nh b√°o trial s·∫Øp h·∫øt h·∫°n
     */
    private void sendTrialWarningEmail(User user, TrialInfo trialInfo) {
        try {
            String userName = getUserDisplayName(user);

            emailService.sendTrialWarningEmail(
                user.getEmail(),
                userName,
                trialInfo.getEndDate(),
                trialInfo.getDaysRemaining()
            );

            log.info("‚ö†Ô∏è ƒê√£ g·ª≠i c·∫£nh b√°o trial cho: {} (c√≤n {} ng√†y)",
                    user.getEmail(), trialInfo.getDaysRemaining());
        } catch (Exception e) {
            log.error("‚ùå L·ªói g·ª≠i c·∫£nh b√°o trial: {}", e.getMessage());
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o trial ƒë√£ h·∫øt h·∫°n
     */
    private void sendTrialExpiredEmail(User user, LocalDateTime expiredDate) {
        try {
            String userName = getUserDisplayName(user);

            emailService.sendTrialExpiredEmail(
                user.getEmail(),
                userName,
                expiredDate
            );

            log.info("üíî ƒê√£ g·ª≠i th√¥ng b√°o h·∫øt h·∫°n trial cho: {}", user.getEmail());
        } catch (Exception e) {
            log.error("‚ùå L·ªói g·ª≠i th√¥ng b√°o h·∫øt h·∫°n trial: {}", e.getMessage());
        }
    }

    private String getUserDisplayName(User user) {
        if (user.getUserProfile() != null) {
            String firstName = user.getUserProfile().getFirstName();
            String lastName = user.getUserProfile().getLastName();

            if (firstName != null && !firstName.trim().isEmpty()) {
                return lastName != null && !lastName.trim().isEmpty()
                    ? firstName + " " + lastName
                    : firstName;
            }
        }
        return user.getEmail().split("@")[0];
    }

    // ===== DTOs =====

    public enum TrialStatus {
        ACTIVE,              // Trial ƒëang ho·∫°t ƒë·ªông
        EXPIRING_SOON,       // Trial s·∫Øp h·∫øt h·∫°n (‚â§ 3 ng√†y)
        EXPIRED,             // Trial ƒë√£ h·∫øt h·∫°n
        PAID_SUBSCRIPTION    // ƒê√£ upgrade l√™n g√≥i tr·∫£ ph√≠
    }

    @lombok.Builder
    @lombok.Data
    public static class TrialInfo {
        private boolean hasAccess;
        private TrialStatus status;
        private LocalDateTime startDate;
        private LocalDateTime endDate;
        private int daysRemaining;
        private int hoursRemaining;
        private int daysOverdue;
        private String message;
    }
}

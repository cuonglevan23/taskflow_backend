version: '3.8'
services:
  app:
    build: .
    image: levancuong23/taskmanagement_backend:latest
    ports:
      - '8080:8080'
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/db_taskmanagement
      SPRING_DATASOURCE_USERNAME: developer
      SPRING_DATASOURCE_PASSWORD: developer_password
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: redis_password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9094
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - taskflow-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - taskflow-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    ports:
      - "2181:2181"
    networks:
      - taskflow-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      # Basic Kafka Configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Listener Configuration
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # Topic Configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

      # Performance Settings
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000

      # Auto Topic Creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

      # Log Level
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"

      # JVM Settings
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"

    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9094 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kafka UI for management (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: taskflow-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8090:8080"
    depends_on:
      - kafka
    networks:
      - taskflow-network
    restart: unless-stopped

  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: db_taskmanagement
      MYSQL_USER: developer
      MYSQL_PASSWORD: developer_password
    ports:
      - '3306:3306'
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p123456']
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s
    networks:
      - taskflow-network

  redis:
    image: redis:7-alpine
    container_name: redis
    environment:
      REDIS_PASSWORD: redis_password
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: ['redis-server', '--requirepass', 'redis_password']
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - taskflow-network
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
  kafka_data:
  elasticsearch_data:

networks:
  taskflow-network:
    driver: bridge
